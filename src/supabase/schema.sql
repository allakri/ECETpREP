-- Supabase Schema for Diploma Prep Hub

-- This script sets up the necessary tables, policies, and triggers for the application.
-- It is designed to be idempotent, meaning it can be run multiple times without causing errors.

-- 1. PROFILES TABLE
-- This table stores public-facing user information.
create table if not exists public.profiles (
  id uuid references auth.users on delete cascade not null primary key,
  name text,
  email text,
  phone_number text,
  branch text,
  college text,
  year_of_study text,
  avg_score float8 default 0,
  tests_taken integer default 0
);

-- Set up Row Level Security (RLS) for the profiles table
alter table public.profiles enable row level security;

-- Drop existing policies if they exist, to prevent errors on re-run
drop policy if exists "Users can view their own profile." on public.profiles;
drop policy if exists "Users can update their own profile." on public.profiles;

-- Policy: Users can see their own profile
create policy "Users can view their own profile."
  on public.profiles for select
  using ( auth.uid() = id );

-- Policy: Users can update their own profile
create policy "Users can update their own profile."
  on public.profiles for update
  using ( auth.uid() = id );


-- 2. TESTS TABLE
-- This table stores a record for each exam a user completes.
create table if not exists public.tests (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles on delete cascade not null,
  examName text,
  score float8,
  date timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Set up Row Level Security (RLS) for the tests table
alter table public.tests enable row level security;

-- Drop existing policy if it exists
drop policy if exists "Users can view their own tests." on public.tests;

-- Policy: Authenticated users can read their own test results
create policy "Users can view their own tests."
  on public.tests for select
  using (auth.uid() = user_id);

-- Drop existing policy if it exists
drop policy if exists "Users can insert their own test results." on public.tests;

-- Policy: Authenticated users can insert their own test results
create policy "Users can insert their own test results."
  on public.tests for insert
  with check (auth.uid() = user_id);


-- 3. NEW USER TRIGGER
-- This function and trigger automatically create a profile entry when a new user signs up.

-- Drop the trigger first if it exists on the auth.users table
drop trigger if exists on_auth_user_created on auth.users;
-- Drop the function if it exists
drop function if exists public.handle_new_user;

-- Function to create a new profile
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, name, email, phone_number, branch, college, year_of_study)
  values (
    new.id,
    new.raw_user_meta_data->>'name',
    new.email,
    new.raw_user_meta_data->>'phone_number',
    new.raw_user_meta_data->>'branch',
    new.raw_user_meta_data->>'college',
    new.raw_user_meta_data->>'year_of_study'
  );
  return new;
end;
$$;

-- Trigger to execute the function upon new user creation
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();