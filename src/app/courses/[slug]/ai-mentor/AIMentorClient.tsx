
'use client';

import { useState, useEffect } from 'react';
import type { Course } from '@/lib/courses';
import { generateStrategicGuidance } from '@/ai/flows/strategic-guidance-flow';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { Brain, Sparkles, AlertTriangle } from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import { Breadcrumbs } from '@/components/layout/Breadcrumbs';

interface AIMentorClientProps {
    course: Omit<Course, 'icon'>;
    children: React.ReactNode;
}

const LoadingSkeleton = () => (
    <div className="space-y-6">
        <Skeleton className="h-8 w-2/3" />
        <Skeleton className="h-4 w-1/3" />
        <div className="space-y-3 pt-4">
            <Skeleton className="h-6 w-1/2" />
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-4/5" />
        </div>
        <div className="space-y-3 pt-4">
            <Skeleton className="h-6 w-1/2" />
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-4/5" />
        </div>
    </div>
)

export function AIMentorClient({ course, children }: AIMentorClientProps) {
    const [guidance, setGuidance] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        const fetchGuidance = async () => {
            setIsLoading(true);
            setError(null);
            try {
                const result = await generateStrategicGuidance({
                    courseTitle: course.title,
                    syllabus: course.syllabus,
                });
                setGuidance(result.guidance);
            } catch (err) {
                console.error("Error fetching AI guidance:", err);
                setError("Failed to generate the study guide. The AI service may be temporarily unavailable. Please try again later.");
            } finally {
                setIsLoading(false);
            }
        };

        if (course) {
          fetchGuidance();
        }
    }, [course]);

    return (
        <div className="bg-secondary/10 py-12">
            <Breadcrumbs />
            <div className="container mx-auto px-4">
                <Card className="max-w-4xl mx-auto shadow-2xl border-primary/20">
                    <CardHeader className="text-center bg-primary/5 p-8">
                         {children}
                        <CardTitle className="text-3xl font-headline text-primary">
                            AI Mentor for {course.title}
                        </CardTitle>
                        <CardDescription className="text-lg">
                            Your personalized roadmap to success, generated by AI.
                        </CardDescription>
                    </CardHeader>
                    <CardContent className="p-8">
                        {isLoading && <LoadingSkeleton />}
                        {error && (
                            <div className="text-center text-destructive-foreground bg-destructive/80 p-6 rounded-lg">
                                <AlertTriangle className="mx-auto h-8 w-8 mb-4" />
                                <h3 className="font-bold text-lg">An Error Occurred</h3>
                                <p>{error}</p>
                            </div>
                        )}
                        {guidance && (
                           <div className="prose dark:prose-invert max-w-none prose-headings:text-primary prose-headings:font-headline">
                             <ReactMarkdown>{guidance}</ReactMarkdown>
                           </div>
                        )}
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}
